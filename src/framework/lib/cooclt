#!/usr/bin/env bash

function invoker()
{
    if [ ! "$COO_MODULE" ];then
        __echo_warning "The param '-m | --module' could not be found." 
        return 1
    fi

    if [ ! "$COO_DO" ];then
        __echo_warning "The param '-d | --do' could not be found." 
        return 1
    fi

    COO_MODULE_DIR=$(find ${SRC_DIR}  -maxdepth 1 -type d -name ${COO_MODULE})

    if [ ! "$COO_MODULE_DIR" ];then
        __echo_warning "The module '$COO_MODULE' could not be found." 
        return 1
    fi


    COO_DO_SCRIPT=$(find ${COO_MODULE_DIR} -type f -name ${COO_DO})

    if [ ! "$COO_DO_SCRIPT" ];then
        __echo_warning "The do scirpt '$COO_DO' could not be found." 
        return 1
    fi

    echo "COO_MODULE_DIR :" ${COO_MODULE_DIR}
    echo "COO_DO_SCRIPT:" ${COO_DO_SCRIPT}
    echo "COO_INVOKE:" ${COO_INVOKE}

    echo "REPLY_YES:" ${REPLY_YES}
    echo "FORCE:" ${FORCE}

    time . ${COO_DO_SCRIPT}
    
    return "$?" 
}

function __geecoo_is_install()
{
    local INS_NAME="$1"
    local INS_DIR="$INSTALL_PREFIX/$INS_NAME"
     
    if [[ -d "$INS_DIR"  ]]
    then
        read -p "$INS_NAME is already installed. Reinstall now ?"

        if [[ $REPLY =~ ^[Nn]$ ]]
        then
            exit 0
        fi
    fi

    return 0
}

__geecoo_install_wget()
{
    local VER_NAME="$1"
    local VER_URL="$2"

    # Storage directory
    if [ "$(type -t __make_and_cd_tar_dir)" = "function" ] 
    then
        __make_and_cd_tar_dir
    fi

    if [[ ! -f "$VER_NAME" ]]
    then
        wget -O "$VER_NAME" "$VER_URL"
    fi
}

__geecoo_install()
{
    local VER_NAME="$1"
    local VER_URL="$2"

    # Storage directory
    if [ "$(type -t __make_and_cd_tar_dir)" = "function" ] 
    then
        __make_and_cd_tar_dir
    fi

    if [[ ! -f "$VER_NAME" ]]
    then
        wget -O "$VER_NAME" "$VER_URL"
    fi

    tar -xzvf "$VER_NAME" && cd ${VER_NAME:0:(-7)}

    if [[ "$?" -ne 0 ]]
    then
        echo "Not found directory ${VER_NAME:0:(-7)}"
        exit 0
    fi

    return 0
}

__geecoo_install_finished()
{
    if [[ "$?" -ne 0 ]]
    then
        log_error "$1 install failed."
        exit 1
    fi
    
    log_success "$1 install success."
}
