#运行用户和组， 可以省略组
user  www www;

# 指定工作衍生进程数 (一般等于CPU的总核数或总核数的两倍， 列如两个四核CPU, 则总核数为8)
worker_processes  2;

worker_rlimit_nofile 51200;
#指定进程可以打开的最大描述符

# 指定错误日志存放路径， 错误级别[ debug | info | notice | warn | error | crit]
error_log  /data/logs/error.log warn;

# pid路径
pid        /var/run/nginx.pid;

events {
    worker_connections  51200;
    # 每个进程允许的连接数
    # 当作为http server 时，并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4 
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535 

    use epoll;
    # epoll是多路复用IO(I/O Multiplexing)中的一种方式, linux推荐epoll, FreeBSD用kqueue模型
    # 仅用于linux2.6以上内核,可以大大提高nginx的性能
    # 补充说明:
    # 与apache相类，nginx针对不同的操作系统，有不同的事件模型
    # A）标准事件模型
    # Select、poll属于标准事件模型，如果当前系统不存在更有效的方法，nginx会选择select或poll
    # apache采用的是select
    # B）高效事件模型

    # Kqueue：使用于FreeBSD 4.1+, OpenBSD 2.9+, NetBSD 2.0 和 MacOS X.使用双处理器的MacOS X系统使用kqueue可能会造成内核崩溃。

    # Epoll:使用于Linux内核2.6版本及以后的系统。

    # /dev/poll：使用于Solaris 7 11/99+, HP/UX 11.22+ (eventport), IRIX 6.5.15+ 和 Tru64 UNIX 5.1A+。

    # Eventport：使用于Solaris 10. 为了防止出现内核崩溃的问题， 有必要安装安全补丁 
}

http {
    # 设定mime类型,类型由mime.type文件定义(不设置，会把js,css直接下载的)
    include       mime.types;
    default_type  application/octet-stream;
    
    # 日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  gzip  '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $bytes_sent '
                      '"$http_referer" "$http_user_agent" "$gzip_ratio"';

    access_log  /data/logs/access.log  main buffer=64k;
    
    
    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile    on;
    # 此选项允许或禁止使用socke的TCP_CORK的选项，此选项仅在使用sendfile的时候使用
    tcp_nopush  on;

    # keepalive超时时间
    # 使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接
    keepalive_timeout   60;

    # 和 tcp_nopush互斥
    #tcp_nodelay on; 

    #set_real_ip_from  172.16.97.0/24;
    real_ip_recursive on;
    real_ip_header X-Forwarded-For;
    
    server_names_hash_bucket_size 128;
    # 保存服务器名字的hash表是由指令server_names_hash_max_size 和server_names_hash_bucket_size所控制的。
    # 参数hash bucket size总是等于hash表的大小，
    # 并且是一路处理器缓存大小的倍数。在减少了在内存中的存取次数后，
    # 使在处理器中加速查找hash表键值成为可能。如果hash bucket size等于一路处理器缓存的大小，
    # 那么在查找键的时候，最坏的情况下在内存中查找的次数为2。
    # 第一次是确定存储单元的地址，第二次是在存储单元中查找键 值。
    # 因此，如果Nginx给出需要增大hash max size 或 hash bucket size的提示，那么首要的是增大前一个参数的大小


    # 设定通过nginx上传文件的大小
    client_max_body_size    50m;

    #  如果把它设置为比较大的数值，例如256k，那么，无论使用firefox还是IE浏览器，
    # 来提交任意小于256k的图片，都很正常。
    # 如果注释该指令，使用默认的client_body_buffer_size设置，也就是操作系统页面大小的两倍，8k或者16k，
    # 问题就出现了。
    # 无论使用firefox4.0还是IE8.0，提交一个比较大，200k左右的图片，都返回500 Internal Server Error错误
    client_body_buffer_size 512k;

    #设定请求缓冲
    # 客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，
    #一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
    # 分页大小可以用命令getconf PAGESIZE 取得。
    #  但也有client_header_buffer_size超过4k的情况，
    # 但是client_header_buffer_size该值必须设置为“系统分页大小”的整倍数。
    client_header_buffer_size    32k; (或128k)


    # 客户请求头缓冲大小
    # nginx默认会用client_header_buffer_size这个buffer来读取header值，如果
    # header过大，它会使用large_client_header_buffers来读取
    # 如果设置过小HTTP头/Cookie过大 会报400 错误nginx 400 bad request
    # 求行如果超过buffer，就会报HTTP 414错误(URI Too Long)
    # nginx接受最长的HTTP头部大小必须比其中一个buffer大，否则就会报400的
    # HTTP错误(Bad Request)。 
    large_client_header_buffers  4 128k;

    # 隐藏Nginx 版本号
    server_tokens   off;
    
    gzip    on;
    gzip_min_length 1000;
    gzip_types  text/plain text/xml text/css text/javascript application/x-javascript application/xml application/rss+xml;
    gzip_disable    "MSIE [1-6]\.";
    
    fastcgi_connect_timeout 300;  
    fastcgi_send_timeout    300;  
    fastcgi_read_timeout    300;  
    fastcgi_buffer_size 128k;  
    fastcgi_buffers 32 128k;  
    fastcgi_busy_buffers_size   256k;
    fastcgi_temp_file_write_size    256k;
    fastcgi_intercept_errors    on;
    
    include /usr/local/nginx/conf.d/*.conf;
}
